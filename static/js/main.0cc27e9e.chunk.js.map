{"version":3,"sources":["components/Navbar/Navbar.js","components/Card/Card.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","text","score","highScore","Card","src","image","alt","id","onClick","clickMe","Wrapper","children","App","state","images","clicked","includes","setState","newClicked","shuffled","i","length","j","Math","floor","random","temporary","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"q4EAeeA,G,MAZD,SAAAC,GACV,OACI,6BACI,yBAAKC,UAAU,oBACX,mDACA,4BAAKD,EAAME,MACX,sCAAYF,EAAMG,MAAlB,wBAA8CH,EAAMI,UAApD,SCODC,G,MAZF,SAAAL,GACT,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAW,QACZ,yBAAKK,IAAKN,EAAMO,MAAOC,IAAKR,EAAMS,GAAIC,QAAS,kBAAKV,EAAMW,QAAQX,EAAMS,YCI7EG,G,MAVC,SAAAZ,GACZ,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACVD,EAAMa,a,OCoERC,G,kNAlEbC,MAAQ,CACNC,SACAb,MAAO,EACPC,UAAW,EACXa,QAAS,GACTf,KAAM,oB,EAGRS,QAAU,SAAAF,GACL,EAAKM,MAAME,QAAQC,SAAST,IAC7B,EAAKU,SAAS,CAACjB,KAAM,UAElB,EAAKa,MAAMX,UAAY,EAAKW,MAAMZ,OACnC,EAAKgB,SAAS,CAACf,UAAW,EAAKW,MAAMZ,QAGvC,EAAKgB,SAAS,CAACF,QAAS,KACxB,EAAKE,SAAS,CAAChB,MAAO,MAItB,EAAKgB,SAAS,CAACjB,KAAK,yCACpB,EAAKiB,SAAS,CAAChB,MAAO,EAAKY,MAAMZ,MAAO,IACxC,EAAKgB,SAAS,CAACF,QAAQ,GAAD,mBAAM,EAAKF,MAAME,SAAjB,CAA0BR,OAElD,IAAMW,EAAa,EAAKL,MAAMC,OAC9B,EAAKK,SAASD,I,EAGhBC,SAAW,SAAAD,GACT,IAAK,IAAIE,EAAEF,EAAWG,OAAQ,EAAGD,EAAE,EAAGA,IAAI,CACxC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAE,IAClCM,EAAYR,EAAWE,GAC7BF,EAAWE,GAAIF,EAAWI,GAC1BJ,EAAWI,GAAKI,I,uDAIX,IAAD,OACN,OACE,6BACE,kBAAC,EAAD,CACA1B,KAAQ2B,KAAKd,MAAMb,KACnBC,MAAS0B,KAAKd,MAAMZ,MACpBC,UAAayB,KAAKd,MAAMX,YAGxB,yBAAKH,UAAW,yBACd,wEACA,sIAA2G,6BAA3G,sEACA,kBAAC,EAAD,KACG4B,KAAKd,MAAMC,OAAOc,KAAI,SAAAvB,GAAK,OAC1B,kBAAC,EAAD,CACEE,GAAIF,EAAME,GACVsB,IAAKxB,EAAME,GACXF,MAAOA,EAAMA,MACbI,QAAS,EAAKA,oB,GAzDZqB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0cc27e9e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nconst Navbar= props =>{\r\n    return(\r\n        <div>\r\n            <nav className=\"navbar fixed-top\">\r\n                <h3>The Simpsons Medley</h3>\r\n                <h4>{props.text}</h4>\r\n                <h4>Donut: {props.score} | Top Donut Count : {props.highScore} </h4>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\nimport \"./card.css\";\r\n\r\nconst Card = props =>{\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-2\">\r\n                <div className= \"card\">\r\n                    <img src={props.image} alt={props.id} onClick={()=> props.clickMe(props.id)}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nconst Wrapper = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React, {Component} from 'react';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Card from \"./components/Card/Card\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport images from \"./images.json\"\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    images,\n    score: 0,\n    highScore: 0,\n    clicked: [],\n    text: \"Click for Donuts\"\n  };\n\n  clickMe = id =>{\n    if(this.state.clicked.includes(id)){\n      this.setState({text: \"D'oh!\"})\n\n      if(this.state.highScore < this.state.score){\n        this.setState({highScore: this.state.score})\n      };\n\n      this.setState({clicked: []})\n      this.setState({score: 0})\n    }\n\n    else{\n      this.setState({text:\"Mmmmm donuts arrggllhelehhargglehhge\"})\n      this.setState({score: this.state.score +1})\n      this.setState({clicked: [...this.state.clicked, id]})\n    };\n    const newClicked = this.state.images\n    this.shuffled(newClicked)\n  };\n\n  shuffled = newClicked =>{\n    for (var i=newClicked.length -1; i>0; i--){\n      const j = Math.floor(Math.random() * (i+1))\n      const temporary = newClicked[i];\n      newClicked[i]= newClicked[j];\n      newClicked[j] = temporary\n    }\n  };\n\n  render(){\n    return(\n      <div>\n        <Navbar \n        text = {this.state.text}\n        score = {this.state.score}\n        highScore = {this.state.highScore}\n        />\n\n        <div className= \"jumbotron text-center\">\n          <h1>Donuts. Is there anything they can't do?</h1>\n          <p>Click on a character to start the game. Do not click on the same character more than once or GAME OVER! <br></br>Earn a donut for remembering which character you already clicked! </p>\n          <Wrapper>\n            {this.state.images.map(image =>(\n              <Card \n                id={image.id}\n                key={image.id}\n                image={image.image}\n                clickMe={this.clickMe}\n              />\n            ))}\n          </Wrapper>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}